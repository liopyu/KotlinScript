import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}
/*dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    shadow "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-reflect:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jsr223:1.8.0"
    shadow "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.7.1"
    shadow "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.7.1"
    shadow "org.jetbrains.kotlin:kotlin-script-runtime:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-script-util:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jvm-host:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:1.8.10"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-script-util:1.8.10"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:1.8.10"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}*/
tasks.named('shadowJar', ShadowJar).configure {
    archiveClassifier.set('all')

    // Set configurations to only include the "shadow" configuration
    configurations = [project.configurations.shadow]

    // Explicitly include only the necessary dependencies
    dependencies {
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        include(dependency('org.jetbrains.kotlin:kotlin-reflect'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib-jdk8'))
        include(dependency('org.jetbrains.kotlin:kotlin-scripting-jvm'))
        include(dependency('org.jetbrains.kotlin:kotlin-scripting-jsr223'))
        include(dependency('org.jetbrains.kotlinx:kotlinx-serialization-json-jvm'))
        include(dependency('org.jetbrains.kotlinx:kotlinx-serialization-core-jvm'))
        include(dependency('org.jetbrains.kotlin:kotlin-script-runtime'))
        include(dependency('org.jetbrains.kotlin:kotlin-script-util'))
        include(dependency('org.jetbrains.kotlin:kotlin-scripting-jvm-host'))
        include(dependency('org.jetbrains.kotlin:kotlin-scripting-common'))
        include(dependency('org.jetbrains.kotlin:kotlin-scripting-compiler-impl'))
        include(dependency('org.jetbrains.kotlin:kotlin-compiler-embeddable'))
        include(dependency('org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable'))
        include(dependency('net.sf.trove4j:trove4j'))
        //include(dependency('org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable'))

       // include(dependency('org.jetbrains.kotlin:kotlin-main-kts'))
    }

    // Exclude unnecessary files to reduce final JAR size
    exclude '**/unnecessary/path/**'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //Shadows
    shadow "org.jetbrains.kotlin:kotlin-scripting-jvm:1.8.10"
    shadow "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-reflect:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    shadow "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.7.1"
    shadow "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.7.1"
    shadow "org.jetbrains.kotlin:kotlin-script-runtime:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-script-util:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jvm-host:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jsr223:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-common:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-compiler-embeddable:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-compiler-impl:1.8.0"
    shadow "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.8.0"
    shadow "net.sf.trove4j:trove4j:3.0.3"
    // shadow "org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:1.8.0"
    // shadow "org.jetbrains.kotlin:kotlin-main-kts:1.8.0"




    //Implementation
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:1.8.10"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.7.1"
    implementation "org.jetbrains.kotlin:kotlin-script-runtime:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-script-util:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm-host:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-jsr223:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-impl:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.8.0"
    implementation "net.sf.trove4j:trove4j:3.0.3"
    //implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:1.8.0"
   // implementation "org.jetbrains.kotlin:kotlin-main-kts:1.8.0"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '17' // Set the target JVM version
    }
}
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
